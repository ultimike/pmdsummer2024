<?php

/**
 * @file
 * Primary module hooks for DrupalEasy Repositories module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_FORM_ID_alter() for user profile form.
 */
function drupaleasy_repositories_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (!empty($form['field_repository_url']['widget'])) {
    foreach (Element::children($form['field_repository_url']['widget']) as $el_index) {
      $form['field_repository_url']['widget'][$el_index]['#process'][] = '_drupaleasy_repositories_url_help_text';
    }
  }
  $form['#validate'][] = '_drupaleasy_repositories_user_form_validate';
  $form['actions']['submit']['#submit'][] = '_drupaleasy_repositories_user_form_submit';
}

/**
 * Custom validator for Repository URL fields.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _drupaleasy_repositories_user_form_validate(array $form, FormStateInterface $form_state): void {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = \Drupal::service('drupaleasy_repositories.service');

  /** @var \Drupal\Core\Entity\EntityFormInterface $theFormObject */
  $theFormObject = $form_state->getFormObject();
  $uid = $theFormObject->getEntity()->id();
  // If the user doesn't exist, then use the anonymous user ID (0).
  $uid = is_null($uid) ? 0 : $uid;

  $error = $repository_service->validateRepositoryUrls($form_state->getValue('field_repository_url'), $uid);

  if ($error) {
    $form_state->setErrorByName('field_repository_url', $error);
  }

}

/**
 * Callback function to populate Repository URL help text.
 *
 * @param array<mixed> $element
 *   The element to modify.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array<mixed> $form
 *   The form array.
 *
 * @return array<mixed>
 *   The modified element.
 */
function _drupaleasy_repositories_url_help_text(array $element, FormStateInterface $form_state, array &$form): array {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = \Drupal::service('drupaleasy_repositories.service');

  $help_text = $repository_service->getValidatorHelpText();

  if ($help_text) {
    $element['uri']['#description'] = t('Valid URLs are: %help_text', ['%help_text' => $help_text]);
  }
  else {
    $element['uri']['#description'] = t('No repository plugins are enabled. Please contact the site administrator.');
  }
  $element['uri']['#description_display'] = 'before';

  return $element;
}

/**
 * Custom submit handler for user profile form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _drupaleasy_repositories_user_form_submit(array $form, FormStateInterface &$form_state): void {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = \Drupal::service('drupaleasy_repositories.service');
  $account = User::load($form_state->getValue('uid'));
  if (!is_null($account)) {
    $repository_service->updateRepositories($account);
  }
}

/**
 * Implements hook_user_login().
 */
function drupaleasy_repositories_user_login(UserInterface $account): void {
  /** @var Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $der */
  $der = \Drupal::service('drupaleasy_repositories.service');

  /** @var \Drupal\Core\Messenger\MessengerInterface $messenger */
  $messenger = \Drupal::service('messenger');

  if ($der->updateRepositories($account)) {
    $messenger->addStatus(t('Your repository nodes have been updated.'));
  }
  else {
    $messenger->addError(t('Something went wrong! Repository nodes were not updated.'));
  }
}

/**
 * Implements hook_cron().
 */
function drupaleasy_repositories_cron(): void {
  // Creating tasks to update repository nodes once per day, between 1-2am GMT.
  // Assume that cron runs once/hour.
  $hour = (int) (time() / 3600) % 24;
  //if ($hour === 1) {
  if (1 === 1) {
    // Get a list of all active users on the site.
    $query = \Drupal::entityQuery('user');
    $query->condition('status', 1);
    $query->condition('field_repository_url', NULL, 'IS NOT NULL');
    $users = $query->accessCheck(FALSE)->execute();

    // Create queue items for each user. Cron will process queue items during
    // future cron runs.
    $queue = \Drupal::queue('drupaleasy_repositories_repository_node_updater');
    foreach ($users as $uid => $user) {
      $queue->createItem(['uid' => $uid]);
    }
  }
}
